rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admins collection - allow admins to read their own data and check admin status
    match /admins/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation during registration (when user might not be fully authenticated yet)
      allow create: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.email == resource.data.email);
    }
    
    // Allow admins to read all user data (for management purposes)
    // This rule needs to be separate and more permissive for admin access
    match /users/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || // User can read their own data
         exists(/databases/$(database)/documents/admins/$(request.auth.uid))); // Admin can read all user data
    }
    
    // Allow listing users collection (needed for admin dashboard)
    match /users {
      allow list: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Projects collection - allow public read access for registration
    match /projects/{projectId} {
      allow read: if true; // Allow anyone to read projects (needed for registration)
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)); // Only admins can modify
    }
    
    // Allow listing projects collection (needed for admin dashboard)
    match /projects {
      allow list: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}