import{d as y,r as v,c as f,u as p,o as C,a as u}from"./index-BYuuB5GE.js";const B=y("complaint",()=>{const s=v([]),l=v(null),i=v(!1),c=v(null),h=v({total:0,open:0,inProgress:0,resolved:0,closed:0}),w=f(()=>s.value),j=f(()=>t=>s.value.filter(o=>o.status===t)),S=f(()=>s.value.sort((t,o)=>new Date(o.lastMessageAt?.toDate())-new Date(t.lastMessageAt?.toDate())).slice(0,5));return{complaints:s,currentComplaint:l,loading:i,error:c,stats:h,userComplaints:w,complaintsByStatus:j,recentComplaints:S,fetchComplaints:async(t={})=>{try{i.value=!0,c.value=null,console.log("🚀 ComplaintStore: Starting fetchComplaints...");const e=p().selectedProject?.id;if(console.log("🔍 ComplaintStore: Project ID:",e),!e)throw new Error("No project selected");const r=await C.getCurrentUser();if(console.log("🔍 ComplaintStore: Current user:",r?r.uid:"Not authenticated"),!r)throw new Error("User not authenticated");const n={...t,userId:r.uid};console.log("🔍 ComplaintStore: Fetching complaints with filters:",{projectId:e,userFilters:n,currentUserId:r.uid});const a=await u.getComplaints(e,n);return console.log("🔍 ComplaintStore: Raw complaints data from service:",a.length,"complaints"),console.log("🔍 ComplaintStore: Sample complaint user IDs:",a.map(d=>({id:d.id,userId:d.userId}))),s.value=a,console.log("✅ ComplaintStore: Complaints fetched and stored:",a.length),console.log("✅ ComplaintStore: Final complaints array:",s.value),a}catch(o){throw c.value=o.message,console.error("❌ ComplaintStore: Error fetching complaints:",o),o}finally{i.value=!1}},fetchComplaint:async t=>{try{i.value=!0,c.value=null,console.log("Fetching complaint in store:",t);const e=p().selectedProject?.id;if(console.log("Selected project:",e),!e)throw new Error("No project selected");const r=await u.getComplaint(e,t);return l.value=r,console.log("Complaint loaded in store:",r),r}catch(o){throw c.value=o.message,console.error("Error fetching complaint:",o),l.value=null,o}finally{i.value=!1}},createComplaint:async t=>{try{i.value=!0,c.value=null;const o=p(),e=await C.getCurrentUser(),r=o.selectedProject?.id;if(!r)throw new Error("No project selected");if(!e?.uid)throw new Error("User not authenticated");const n=await u.createComplaint(r,e.uid,t);return s.value.unshift(n),n}catch(o){throw c.value=o.message,console.error("Error creating complaint:",o),o}finally{i.value=!1}},addMessage:async(t,o)=>{let e=null;try{i.value=!0,c.value=null;const n=p().selectedProject?.id;if(!n)throw new Error("No project selected");e={id:`temp_${Date.now()}`,...o,timestamp:new Date,isOptimistic:!0},l.value&&l.value.id===t&&(l.value.messages.push(e),l.value.lastMessageAt=e.timestamp);const a=s.value.findIndex(m=>m.id===t);a!==-1&&(s.value[a].messages.push(e),s.value[a].lastMessageAt=e.timestamp);const d=await u.addMessage(n,t,o);if(l.value&&l.value.id===t){const m=l.value.messages.findIndex(g=>g.id===e.id);m!==-1&&(l.value.messages[m]=d),l.value.lastMessageAt=d.timestamp}if(a!==-1){const m=s.value[a].messages.findIndex(g=>g.id===e.id);m!==-1&&(s.value[a].messages[m]=d),s.value[a].lastMessageAt=d.timestamp}return d}catch(r){if(c.value=r.message,console.error("Error adding message:",r),e){l.value&&l.value.id===t&&(l.value.messages=l.value.messages.filter(a=>a.id!==e.id));const n=s.value.findIndex(a=>a.id===t);n!==-1&&(s.value[n].messages=s.value[n].messages.filter(a=>a.id!==e.id))}throw r}finally{i.value=!1}},uploadImage:async(t,o)=>{try{return i.value=!0,c.value=null,await u.uploadComplaintImage(t,o)}catch(e){throw c.value=e.message,console.error("Error uploading image:",e),e}finally{i.value=!1}},updateComplaintStatus:async(t,o)=>{try{i.value=!0,c.value=null;const r=p().selectedProject?.id;if(!r)throw new Error("No project selected");await u.updateComplaintStatus(r,t,o);const n=s.value.findIndex(a=>a.id===t);return n!==-1&&(s.value[n].status=o,s.value[n].updatedAt=new Date),l.value&&l.value.id===t&&(l.value.status=o,l.value.updatedAt=new Date),!0}catch(e){throw c.value=e.message,console.error("Error updating complaint status:",e),e}finally{i.value=!1}},fetchStats:async()=>{try{i.value=!0,c.value=null;const o=p().selectedProject?.id;if(!o)throw new Error("No project selected");const e=await u.getComplaintStats(o);return h.value=e,e}catch(t){throw c.value=t.message,console.error("Error fetching stats:",t),t}finally{i.value=!1}},subscribeToComplaints:(t={})=>{const e=p().selectedProject?.id;return e?u.subscribeToComplaints(e,t,r=>{s.value=r}):(console.error("No project selected for subscription"),null)},subscribeToComplaint:t=>{const e=p().selectedProject?.id;return e?u.subscribeToComplaint(e,t,r=>{if(r){l.value=r;const n=s.value.findIndex(a=>a.id===t);n!==-1&&(s.value[n]=r)}}):(console.error("No project selected for subscription"),null)},clearCurrentComplaint:()=>{l.value=null},clearError:()=>{c.value=null},complaintCategories:[{id:"gate_access",name:"Gate Access",icon:"gate"},{id:"noise",name:"Noise Complaint",icon:"volume_off"},{id:"maintenance",name:"Maintenance Request",icon:"build"},{id:"security",name:"Security Issue",icon:"security"},{id:"facility",name:"Facility Issue",icon:"home"},{id:"billing",name:"Billing Issue",icon:"receipt"},{id:"other",name:"Other",icon:"help"}],priorityLevels:[{id:"Low",name:"Low",color:"green"},{id:"Medium",name:"Medium",color:"orange"},{id:"High",name:"High",color:"red"},{id:"Urgent",name:"Urgent",color:"purple"}]}});export{B as u};
