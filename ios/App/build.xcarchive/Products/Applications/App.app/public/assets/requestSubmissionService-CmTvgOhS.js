const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BYuuB5GE.js","assets/index-BWVvr855.css"])))=>i.map(i=>d[i]);
import{j as q,d as _,r as h,c as w,g as m,_ as g,a9 as D,aa as E,bC as I}from"./index-BYuuB5GE.js";class C{async getRequestCategories(e,t=!0){try{console.log("🚀 RequestCategoriesService: Getting categories for project:",e);const s=await q.getRequestCategories(e,t);return console.log("🚀 RequestCategoriesService: Retrieved categories:",s.length),s}catch(s){throw console.error("Error fetching request categories:",s),s}}async getRequestCategoriesByCategory(e,t,s=!0){try{console.log("🚀 RequestCategoriesService: Getting request categories for category:",t);const o=await q.getRequestCategoriesByCategory(e,t,s);return console.log("🚀 RequestCategoriesService: Retrieved request categories:",o.length),o}catch(o){throw console.error("Error fetching request categories by category:",o),o}}}const R=new C,P=_("requestCategories",()=>{const v=h([]),e=h(!1),t=h(null),s=w(()=>v.value),o=w(()=>e.value),c=w(()=>t.value);return{categories:v,loading:e,error:t,getCategories:s,isLoading:o,getError:c,fetchCategories:async n=>{try{e.value=!0,t.value=null;const d=await R.getRequestCategories(n,!0);v.value=d,console.log("Request categories fetched successfully:",d.length)}catch(d){console.error("Error fetching request categories:",d),t.value=d.message||"Failed to fetch request categories"}finally{e.value=!1}},getRequestCategoriesByCategory:async(n,d)=>{try{return e.value=!0,t.value=null,await R.getRequestCategoriesByCategory(n,d,!0)}catch(u){return console.error("Error fetching request categories by category:",u),t.value=u.message||"Failed to fetch request categories",[]}finally{e.value=!1}},clearError:()=>{t.value=null},clearCategories:()=>{v.value=[]}}});class O{async submitRequest(e,t=[]){try{if(console.log("🚀 RequestSubmissionService: Submitting request",{categoryId:e.categoryId,userId:e.userId,filesCount:t.length}),!m)throw new Error("Firebase Firestore not initialized");const s={...e,mediaFiles:[],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};console.log("📝 RequestSubmissionService: Creating document first to get submission ID...");let o;try{if(/iPad|iPhone|iPod/.test(navigator.userAgent)){console.log("📱 iOS: Using firestoreService for document creation");const{default:a}=await g(async()=>{const{default:r}=await import("./index-BYuuB5GE.js").then(n=>n.cz);return{default:r}},__vite__mapDeps([0,1]));await a.initialize(),o=await a.addDoc(`projects/${e.projectId}/requestSubmissions`,s),console.log("📱 iOS: Document created with ID:",o.id)}else console.log("🌐 Web: Using Web SDK for document creation"),o=await D(E(m,`projects/${e.projectId}/requestSubmissions`),s),console.log("🌐 Web: Document created with ID:",o.id)}catch(l){throw console.error("❌ RequestSubmissionService: Error creating document:",l),l}const c=o.id;console.log("✅ RequestSubmissionService: Document created successfully with ID:",c);let i=[];if(t&&t.length>0)try{if(console.log("📤 RequestSubmissionService: Uploading files with actual submission ID..."),i=await this.uploadMediaFiles(e.projectId,c,t),console.log("✅ RequestSubmissionService: Files uploaded successfully"),console.log("📝 RequestSubmissionService: Updating document with uploaded files..."),/iPad|iPhone|iPod/.test(navigator.userAgent)){console.log("📱 iOS: Using firestoreService for document update");const{default:a}=await g(async()=>{const{default:r}=await import("./index-BYuuB5GE.js").then(n=>n.cz);return{default:r}},__vite__mapDeps([0,1]));await a.initialize(),await a.updateDoc(`projects/${e.projectId}/requestSubmissions/${c}`,{mediaFiles:i,updatedAt:new Date().toISOString()}),console.log("📱 iOS: Document updated with media files via firestoreService")}else{console.log("🌐 Web: Using Web SDK for document update");const{doc:a,updateDoc:r}=await g(async()=>{const{doc:d,updateDoc:u}=await import("./index-BYuuB5GE.js").then(S=>S.cv);return{doc:d,updateDoc:u}},__vite__mapDeps([0,1])),n=a(m,`projects/${e.projectId}/requestSubmissions/${c}`);await r(n,{mediaFiles:i,updatedAt:new Date().toISOString()}),console.log("🌐 Web: Document updated with media files via Web SDK")}console.log("✅ RequestSubmissionService: Document updated with media files")}catch(l){console.warn("⚠️ RequestSubmissionService: File upload failed, continuing without files:",l.message),i=[]}return console.log("✅ RequestSubmissionService: Request submitted successfully",{submissionId:c,categoryId:e.categoryId}),c}catch(s){throw console.error("❌ RequestSubmissionService: Error submitting request:",s),console.error("❌ Error details:",{message:s.message,code:s.code,stack:s.stack,submissionData:{projectId:e.projectId,categoryId:e.categoryId,userId:e.userId,hasFormData:!!e.formData,formDataKeys:Object.keys(e.formData||{}),mediaFilesCount:e.mediaFiles?.length||0}}),new Error(`Failed to submit request: ${s.message}`)}}async uploadMediaFiles(e,t,s){console.log("📤 RequestSubmissionService: Starting file uploads...",s.length),console.log("📤 RequestSubmissionService: Using actual submission ID:",t);const o=s.map(async(i,l)=>{try{console.log(`📤 Uploading file ${l+1}/${s.length}: ${i.name} (${(i.size/1024/1024).toFixed(2)} MB)`);const a=Date.now(),r=i.name.split(".").pop(),n=`request_${a}_${l}.${r}`,d=`projects/${e}/requestSubmissions/${t}/media/`,u=await I.uploadFile(i,d,n);return console.log(`✅ File ${i.name} uploaded successfully`),{name:i.name,type:i.type,size:i.size,url:u,storagePath:d+n,uploadedAt:new Date}}catch(a){return console.error(`❌ RequestSubmissionService: Error uploading file ${i.name}:`,a),console.warn(`⚠️ Skipping file ${i.name} due to error, continuing with submission`),{name:i.name,type:i.type,size:i.size,url:null,storagePath:null,uploadedAt:new Date,error:a.message}}}),c=await Promise.all(o);return console.log("✅ RequestSubmissionService: All files uploaded successfully"),c}async compressImage(e){return new Promise((t,s)=>{const o=document.createElement("canvas"),c=o.getContext("2d"),i=new Image;i.onload=()=>{let{width:r,height:n}=i;r>1920&&(n=n*1920/r,r=1920),n>1080&&(r=r*1080/n,n=1080),o.width=r,o.height=n,c.drawImage(i,0,0,r,n),o.toBlob(d=>{if(d){const u=new File([d],e.name,{type:"image/jpeg",lastModified:Date.now()});if(console.log(`📐 Compressed file created: ${u.name}, size: ${(u.size/1024/1024).toFixed(2)} MB, type: ${u.type}`),console.log("📐 Compressed file validation:",{isFile:u instanceof File,hasName:!!u.name,hasType:!!u.type,size:u.size,lastModified:u.lastModified,blobSize:d.size}),u.size===0){s(new Error("Compressed file is empty"));return}t(u)}else s(new Error("Failed to compress image - no blob created"))},"image/jpeg",.8)},i.onerror=()=>s(new Error("Failed to load image for compression")),i.src=URL.createObjectURL(e)})}async getUserSubmissions(e,t){try{if(console.log("🚀 RequestSubmissionService: Getting user submissions",{projectId:e,userId:t}),/iPad|iPhone|iPod/.test(navigator.userAgent)){console.log("📱 iOS: Using firestoreService for getUserSubmissions");const{default:o}=await g(async()=>{const{default:r}=await import("./index-BYuuB5GE.js").then(n=>n.cz);return{default:r}},__vite__mapDeps([0,1]));await o.initialize();const c=`projects/${e}/requestSubmissions`,i={filters:[{field:"userId",operator:"==",value:t}],orderBy:{field:"createdAt",direction:"desc"},timeoutMs:1e4},a=(await o.getDocs(c,i)).docs.map(r=>({id:r.id,...r.data()}));return console.log("✅ RequestSubmissionService: Retrieved user submissions via firestoreService",{count:a.length}),a}else{console.log("🌐 Web: Using Firebase Web SDK for getUserSubmissions");const{getDocs:o,query:c,where:i,orderBy:l,collection:a}=await g(async()=>{const{getDocs:u,query:S,where:y,orderBy:b,collection:p}=await import("./index-BYuuB5GE.js").then(f=>f.cv);return{getDocs:u,query:S,where:y,orderBy:b,collection:p}},__vite__mapDeps([0,1])),r=c(a(m,`projects/${e}/requestSubmissions`),i("userId","==",t),l("createdAt","desc")),d=(await o(r)).docs.map(u=>({id:u.id,...u.data()}));return console.log("✅ RequestSubmissionService: Retrieved user submissions via Web SDK",{count:d.length}),d}}catch(s){throw console.error("❌ RequestSubmissionService: Error getting user submissions:",s),new Error(`Failed to get user submissions: ${s.message}`)}}async getCategorySubmissions(e,t){try{if(console.log("🚀 RequestSubmissionService: Getting category submissions",{projectId:e,categoryId:t}),/iPad|iPhone|iPod/.test(navigator.userAgent)){console.log("📱 iOS: Using firestoreService for getCategorySubmissions");const{default:o}=await g(async()=>{const{default:r}=await import("./index-BYuuB5GE.js").then(n=>n.cz);return{default:r}},__vite__mapDeps([0,1]));await o.initialize();const c=`projects/${e}/requestSubmissions`,i={filters:[{field:"categoryId",operator:"==",value:t}],orderBy:{field:"createdAt",direction:"desc"},timeoutMs:1e4},a=(await o.getDocs(c,i)).docs.map(r=>({id:r.id,...r.data()}));return console.log("✅ RequestSubmissionService: Retrieved category submissions via firestoreService",{count:a.length}),a}else{console.log("🌐 Web: Using Firebase Web SDK for getCategorySubmissions");const{getDocs:o,query:c,where:i,orderBy:l,collection:a}=await g(async()=>{const{getDocs:u,query:S,where:y,orderBy:b,collection:p}=await import("./index-BYuuB5GE.js").then(f=>f.cv);return{getDocs:u,query:S,where:y,orderBy:b,collection:p}},__vite__mapDeps([0,1])),r=c(a(m,`projects/${e}/requestSubmissions`),i("categoryId","==",t),l("createdAt","desc")),d=(await o(r)).docs.map(u=>({id:u.id,...u.data()}));return console.log("✅ RequestSubmissionService: Retrieved category submissions via Web SDK",{count:d.length}),d}}catch(s){throw console.error("❌ RequestSubmissionService: Error getting category submissions:",s),new Error(`Failed to get category submissions: ${s.message}`)}}async getAllSubmissions(e){try{if(console.log("🚀 RequestSubmissionService: Getting all submissions",{projectId:e}),/iPad|iPhone|iPod/.test(navigator.userAgent)){console.log("📱 iOS: Using firestoreService for getAllSubmissions");const{default:s}=await g(async()=>{const{default:a}=await import("./index-BYuuB5GE.js").then(r=>r.cz);return{default:a}},__vite__mapDeps([0,1]));await s.initialize();const o=`projects/${e}/requestSubmissions`,c={orderBy:{field:"createdAt",direction:"desc"},timeoutMs:1e4},l=(await s.getDocs(o,c)).docs.map(a=>({id:a.id,...a.data()}));return console.log("✅ RequestSubmissionService: Retrieved all submissions via firestoreService",{count:l.length}),l}else{console.log("🌐 Web: Using Firebase Web SDK for getAllSubmissions");const{getDocs:s,query:o,orderBy:c,collection:i}=await g(async()=>{const{getDocs:n,query:d,orderBy:u,collection:S}=await import("./index-BYuuB5GE.js").then(y=>y.cv);return{getDocs:n,query:d,orderBy:u,collection:S}},__vite__mapDeps([0,1])),l=o(i(m,`projects/${e}/requestSubmissions`),c("createdAt","desc")),r=(await s(l)).docs.map(n=>({id:n.id,...n.data()}));return console.log("✅ RequestSubmissionService: Retrieved all submissions via Web SDK",{count:r.length}),r}}catch(t){throw console.error("❌ RequestSubmissionService: Error getting all submissions:",t),new Error(`Failed to get all submissions: ${t.message}`)}}async updateSubmissionStatus(e,t,s,o){try{console.log("🚀 RequestSubmissionService: Updating submission status",{projectId:e,submissionId:t,status:s,adminId:o});const{doc:c,updateDoc:i}=await g(async()=>{const{doc:a,updateDoc:r}=await import("./index-BYuuB5GE.js").then(n=>n.cv);return{doc:a,updateDoc:r}},__vite__mapDeps([0,1])),l=c(m,`projects/${e}/requestSubmissions/${t}`);await i(l,{status:s,updatedAt:new Date().toISOString(),updatedBy:o}),console.log("✅ RequestSubmissionService: Submission status updated successfully")}catch(c){throw console.error("❌ RequestSubmissionService: Error updating submission status:",c),new Error(`Failed to update submission status: ${c.message}`)}}async addMessage(e,t,s){try{console.log("🚀 RequestSubmissionService: Adding message to submission",{projectId:e,submissionId:t});const{addDoc:o,collection:c}=await g(async()=>{const{addDoc:r,collection:n}=await import("./index-BYuuB5GE.js").then(d=>d.cv);return{addDoc:r,collection:n}},__vite__mapDeps([0,1])),i=c(m,`projects/${e}/requestSubmissions/${t}/messages`),l={...s,createdAt:new Date().toISOString()},a=await o(i,l);return console.log("✅ RequestSubmissionService: Message added successfully",{messageId:a.id}),a.id}catch(o){throw console.error("❌ RequestSubmissionService: Error adding message:",o),new Error(`Failed to add message: ${o.message}`)}}async testIOSSubmission(){console.log("🧪 Testing iOS submission...");try{const e={categoryId:"test-category",categoryName:"Test Category",userId:"test-user-id",userName:"Test User",userEmail:"test@example.com",userPhone:"1234567890",formData:{testField:"test value"},fieldMetadata:[{id:"testField",fieldName:"Test Field",fieldType:"text",required:!0,placeholder:"Enter test value"}],mediaFiles:[],status:"pending",projectId:"test-project"};console.log("🧪 Test submission data:",e);const t=await this.submitRequest(e,[]);return console.log("✅ Test submission successful:",t),t}catch(e){throw console.error("❌ Test submission failed:",e),e}}}const $=new O;export{$ as r,P as u};
