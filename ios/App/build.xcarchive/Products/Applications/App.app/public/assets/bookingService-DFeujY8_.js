const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BYuuB5GE.js","assets/index-BWVvr855.css"])))=>i.map(i=>d[i]);
import{p as y,f as d,e as k,_ as P}from"./index-BYuuB5GE.js";class I{constructor(){}generateTimeSlots(r=6,o=22,e=60){const s=[],t=new Date;t.setHours(r,0,0,0);const i=new Date;for(i.setHours(o,0,0,0);t<i;)s.push({time:t.toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),isReserved:!1,startTime:new Date(t)}),t.setMinutes(t.getMinutes()+e);return s}generateAvailableDays(){const r=[],o=new Date;for(let e=0;e<7;e++){const s=new Date;s.setDate(o.getDate()+e),r.push(s)}return r}async checkSlotAvailability(r,o,e,s){return y.timeOperation("checkSlotAvailability",async()=>{try{console.log("🔍 Checking slot availability:",{projectId:r,courtId:o,date:e,time:s});const t=`projects/${r}/bookings`,i={courtId:{operator:"==",value:o},date:{operator:"==",value:e},timeSlots:{operator:"array-contains",value:s},status:{operator:"in",value:["confirmed","pending"]}},g=await d.getDocs(t,i),l=g.docs.length===0;return console.log("✅ Slot availability check result:",{isAvailable:l,bookingsFound:g.docs.length}),l}catch(t){return console.error("❌ Error checking slot availability:",t),k.handleFirestoreError(t,"checkSlotAvailability"),!1}})}async getAvailableTimeSlots(r,o,e){return y.timeOperation("getAvailableTimeSlots",async()=>{try{console.log("🔍 Getting available time slots:",{projectId:r,courtId:o,date:e});let s=[],t=null;try{const n=await d.getDoc(`projects/${r}/courts/${o}`);if(t=n?.snapshot?.data||n?.data?.()||n,!t)console.warn("⚠️ No court data found, using default time slots"),s=this.generateTimeSlots();else{console.log("📋 Court data:",t);const m=new Date(e),a=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"][m.getDay()];if(console.log("📅 Selected date:",e,"Day of week:",a),t.availability&&t.availability[a]){const c=t.availability[a];if(console.log(`📅 ${a} schedule:`,c),!c.enabled)return console.log(`🚫 Court is closed on ${a}`),[];const u=c.startTime||"08:00",p=c.endTime||"22:00",w=parseInt(u.split(":")[0]),B=parseInt(u.split(":")[1]),$=parseInt(p.split(":")[0]),E=parseInt(p.split(":")[1]),v=t.bookingIntervalMinutes||60;console.log(`⏰ Generating slots: ${u} to ${p}, ${v} min intervals`);const h=[],f=new Date;f.setHours(w,B,0,0);const A=new Date;for(A.setHours($,E,0,0);f<A;)h.push({time:f.toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),isReserved:!1,startTime:new Date(f)}),f.setMinutes(f.getMinutes()+v);s=h,console.log(`✅ Generated ${h.length} slots for ${a}`)}else if(t.timeSlotConfig){const{startHour:c,endHour:u,intervalMinutes:p}=t.timeSlotConfig;console.log("🔍 Using legacy timeSlotConfig:",t.timeSlotConfig),s=this.generateTimeSlots(c,u,p)}else console.log("🔍 No availability schedule found, using defaults (8 AM - 10 PM, 1 hour)"),s=this.generateTimeSlots(8,22,60)}}catch(n){console.warn("⚠️ Could not fetch court config, using default time slots:",n),s=this.generateTimeSlots(8,22,60)}const i=`projects/${r}/bookings`,g=[{field:"courtId",operator:"==",value:o},{field:"date",operator:"==",value:e},{field:"status",operator:"in",value:["confirmed","pending"]}];console.log("🔍 Debug: Query filters:",g);const l=await d.getDocs(i,{filters:g}),b=[];l.docs.forEach(n=>{const m=n.data();if(m.timeSlots){const S=m.timeSlots.map(a=>a.match(/^\d:\d{2} [AP]M$/)?"0"+a:a);b.push(...S),console.log("🔍 Debug: Original slots:",m.timeSlots,"Normalized slots:",S)}}),console.log("🔍 Debug: Booked slots from database:",b),console.log("🔍 Debug: Generated base slots:",s.map(n=>n.time)),console.log("🔍 Debug: Sample booking data:",l.docs.slice(0,3).map(n=>({id:n.id,timeSlots:n.data().timeSlots,date:n.data().date,courtId:n.data().courtId})));const D=[...new Set(l.docs.map(n=>n.data().date))];console.log("🔍 Debug: Query date:",e),console.log("🔍 Debug: All dates in results:",D),console.log("🔍 Debug: Date filter working?",D.length===1&&D[0]===e);const T=s.map(n=>({...n,isReserved:b.includes(n.time)}));return console.log("✅ Available time slots retrieved:",{totalSlots:T.length,bookedSlots:b.length,availableCount:T.filter(n=>!n.isReserved).length}),T}catch(s){return console.error("❌ Error getting available time slots:",s),k.handleFirestoreError(s,"getAvailableTimeSlots"),this.generateTimeSlots()}})}async getAvailableTimeSlotsOptimized(r,o,e,s){return y.timeOperation("getAvailableTimeSlotsOptimized",async()=>{try{console.log("🚀 OPTIMIZED: Getting time slots (skipping court fetch)");let t=[];if(!s)return console.warn("⚠️ No court data provided, falling back to regular method"),this.getAvailableTimeSlots(r,o,e);console.log("📋 Using provided court data");const i=new Date(e),l=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"][i.getDay()];if(console.log("📅 Day of week:",l),s.availability&&s.availability[l]){const a=s.availability[l];if(!a.enabled)return console.log(`🚫 Court is closed on ${l}`),[];const c=a.startTime||"08:00",u=a.endTime||"22:00",p=parseInt(c.split(":")[0]),w=parseInt(c.split(":")[1]),B=parseInt(u.split(":")[0]),$=parseInt(u.split(":")[1]),E=s.bookingIntervalMinutes||60;console.log(`⏰ ${c} to ${u}, ${E} min intervals`);const v=[],h=new Date;h.setHours(p,w,0,0);const f=new Date;for(f.setHours(B,$,0,0);h<f;)v.push({time:h.toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),isReserved:!1,startTime:new Date(h)}),h.setMinutes(h.getMinutes()+E);t=v,console.log(`✅ Generated ${v.length} slots`)}else console.log("🔍 No availability schedule, using defaults"),t=this.generateTimeSlots(8,22,60);console.log("🔍 Fetching bookings for court:",o,"on date:",e);const b=`projects/${r}/bookings`,D=[{field:"courtId",operator:"==",value:o},{field:"date",operator:"==",value:e}];console.log("🚀 Executing simplified Firestore query...");const T=Date.now();let n;try{n=await d.getDocs(b,{filters:D,timeoutMs:3e3}),console.log(`⏱️ Query took ${Date.now()-T}ms`)}catch(a){return console.warn("⚠️ Bookings query failed, assuming no bookings:",a),t.map(c=>({...c,isReserved:!1}))}const m=[];n.docs.forEach(a=>{const c=a.data(),u=c.status||"pending";if((u==="confirmed"||u==="pending")&&c.timeSlots){const p=c.timeSlots.map(w=>w.match(/^\d:\d{2} [AP]M$/)?"0"+w:w);m.push(...p)}}),console.log("📅 Booked slots after filtering:",m);const S=t.map(a=>({...a,isReserved:m.includes(a.time)}));return console.log("✅ Time slots ready:",{total:S.length,booked:m.length}),S}catch(t){return console.error("❌ Error in optimized time slots:",t),this.generateTimeSlots()}})}async createCourtBooking(r,o){return y.timeOperation("createCourtBooking",async()=>{try{if(console.log("🚀 Starting court booking creation..."),!r)throw new Error("Project ID is required");if(!o.userId)throw new Error("User ID is required");if(!o.courtId)throw new Error("Court ID is required");if(!o.date)throw new Error("Date is required");if(!o.timeSlots||o.timeSlots.length===0)throw new Error("Time slots are required");const e={...o,projectId:r,createdAt:new Date,status:"pending",type:"court"};console.log("🚀 Creating court booking:",e);const s=`projects/${r}/bookings`;console.log("🔍 Starting Firestore addDoc operation..."),console.log("⏰ Start time:",new Date().toISOString());const t=await d.addDoc(s,e);console.log("⏰ End time:",new Date().toISOString()),console.log("🔍 Firestore addDoc result:",t);const i=t.id||t.documentId||t;if(console.log("✅ Court booking created successfully:",{bookingId:i}),!i)throw console.error("❌ No booking ID returned from addDoc:",t),new Error("Failed to create booking - no ID returned");console.log("🗑️ Invalidating bookings cache...");const{default:g}=await P(async()=>{const{default:l}=await import("./index-BYuuB5GE.js").then(b=>b.cy);return{default:l}},__vite__mapDeps([0,1]));return g.invalidatePattern(`collection:projects/${r}/bookings`),console.log("🎉 Court booking completed successfully with ID:",i),{success:!0,bookingId:i,booking:{...e,id:i}}}catch(e){throw console.error("❌ Error creating court booking:",e),k.handleFirestoreError(e,"createCourtBooking"),e}})}async createAcademyBooking(r,o){return y.timeOperation("createAcademyBooking",async()=>{try{if(!r)throw new Error("Project ID is required");if(!o.userId)throw new Error("User ID is required");if(!o.academyId)throw new Error("Academy ID is required");if(!o.programId)throw new Error("Program ID is required");const e={...o,projectId:r,createdAt:new Date,status:"pending",type:"academy"};console.log("🚀 Creating academy booking:",e);const s=`projects/${r}/bookings`,t=await d.addDoc(s,e);console.log("🔍 Firestore addDoc result:",t);const i=t.id||t.documentId||t;return console.log("✅ Academy booking created successfully:",{bookingId:i}),{success:!0,bookingId:i,booking:{...e,id:i}}}catch(e){throw console.error("❌ Error creating academy booking:",e),k.handleFirestoreError(e,"createAcademyBooking"),e}})}async getUserBookings(r,o){return y.timeOperation("getUserBookings",async()=>{try{console.log("🔍 Getting user bookings:",{projectId:r,userId:o});const e=`projects/${r}/bookings`,s={userId:{operator:"==",value:o}},t={field:"createdAt",direction:"desc"},g=(await d.getDocs(e,s,t)).docs.map(l=>({id:l.id,...l.data()}));return console.log("✅ User bookings retrieved:",{count:g.length}),g}catch(e){throw console.error("❌ Error fetching user bookings:",e),k.handleFirestoreError(e,"getUserBookings"),e}})}async getProjectBookings(r){return y.timeOperation("getProjectBookings",async()=>{try{console.log("🔍 Getting project bookings:",{projectId:r});const o=`projects/${r}/bookings`,e={field:"createdAt",direction:"desc"},t=(await d.getDocs(o,null,e)).docs.map(i=>({id:i.id,...i.data()}));return console.log("✅ Project bookings retrieved:",{count:t.length}),t}catch(o){throw console.error("❌ Error fetching project bookings:",o),k.handleFirestoreError(o,"getProjectBookings"),o}})}async updateBookingStatus(r,o,e){return y.timeOperation("updateBookingStatus",async()=>{try{console.log("🔍 Updating booking status:",{projectId:r,bookingId:o,newStatus:e});const s=`projects/${r}/bookings/${o}`,t={status:e,updatedAt:new Date};return await d.updateDoc(s,t),console.log("✅ Booking status updated successfully"),{success:!0}}catch(s){throw console.error("❌ Error updating booking status:",s),k.handleFirestoreError(s,"updateBookingStatus"),s}})}async cancelBooking(r,o){return y.timeOperation("cancelBooking",async()=>{try{console.log("🔍 Cancelling booking:",{projectId:r,bookingId:o});const e=`projects/${r}/bookings/${o}`,s={status:"cancelled",updatedAt:new Date};return await d.updateDoc(e,s),console.log("✅ Booking cancelled successfully"),{success:!0}}catch(e){throw console.error("❌ Error cancelling booking:",e),k.handleFirestoreError(e,"cancelBooking"),e}})}async completeBooking(r,o){return y.timeOperation("completeBooking",async()=>{try{console.log("🔍 Completing booking:",{projectId:r,bookingId:o});const e=`projects/${r}/bookings/${o}`,s={status:"completed",updatedAt:new Date};return await d.updateDoc(e,s),console.log("✅ Booking completed successfully"),{success:!0}}catch(e){throw console.error("❌ Error completing booking:",e),k.handleFirestoreError(e,"completeBooking"),e}})}calculatePrice(r,o){return!r||!o||o.length===0?0:r*o.length}formatDate(r){if(!r)return"";const o={weekday:"short",day:"numeric",month:"short"};return r.toLocaleDateString("en-US",o)}}const O=new I;export{O as b};
