const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BYuuB5GE.js","assets/index-BWVvr855.css","assets/index-BO5nUoOC.js","assets/index-CMcjIgnu.js"])))=>i.map(i=>d[i]);
import{ay as f,_ as a,az as l,aA as C,b as h,g as u,h as m,s as d,ac as F,ad as M,aa as k,am as p,af as S,aB as w}from"./index-BYuuB5GE.js";import{g as b,a as y,o as T,d as N}from"./index.esm2017-CIdvQvBW.js";class _{constructor(){this.messaging=null,this.isNative=f.isNativePlatform(),this.platform=f.getPlatform(),this.currentToken=null,this.notificationHandlers=[],this.FirebaseMessaging=null,this.vapidKey="BDL03mUP_fsEjpZLMLwj-EW0XGFUPXDu8alAQgAKrlcGrHe39yxSF8DH1yn75Y93vOYc-5nNcRctEhMoBPvQatQ",console.log("FCMService: Initialized",{isNative:this.isNative,platform:this.platform})}async initialize(){try{return console.log("FCMService: Starting initialization..."),this.isNative?await this.initializeNative():await this.initializeWeb(),console.log("FCMService: Initialization complete"),!0}catch(e){return console.error("FCMService: Initialization failed:",e),!1}}async initializeNative(){console.log("FCMService: Initializing native Firebase Messaging...");try{const{FirebaseMessaging:e}=await a(async()=>{const{FirebaseMessaging:t}=await import("./index-BYuuB5GE.js").then(o=>o.cA);return{FirebaseMessaging:t}},__vite__mapDeps([0,1]));this.FirebaseMessaging=e,console.log("FCMService: FirebaseMessaging plugin loaded"),console.log("FCMService: Requesting notification permissions...");const i=await e.requestPermissions();if(console.log("FCMService: Permission result:",i),i.receive==="granted"){console.log("FCMService: Permission granted ‚úÖ"),this.setupNativeListeners(),console.log("FCMService: Getting FCM token...");const o=(await e.getToken()).token;if(o){console.log("üéâ FCMService: Got FCM token:",o),console.log("üéâ FCMService: Token length:",o.length),this.currentToken=o;try{const r=await this.getCurrentUserId();if(r){const{FirebaseFirestore:s}=await a(async()=>{const{FirebaseFirestore:n}=await import("./index-BO5nUoOC.js");return{FirebaseFirestore:n}},__vite__mapDeps([2,0,1]));await s.setDocument({reference:`users/${r}`,data:{fcmToken:o},merge:!0}),console.log("‚úÖ FCMService: Immediate user fcmToken updated (native)")}}catch(r){console.warn("‚ö†Ô∏è FCMService: Immediate flat fcmToken write failed (native):",r)}await this.saveTokenWithRetry(o,this.platform)}else console.warn("‚ö†Ô∏è FCMService: No token received");console.log("‚úÖ FCMService: Native initialization complete")}else throw console.warn("FCMService: Push notification permission denied"),new Error("Push notification permission denied")}catch(e){throw console.error("FCMService: Native initialization error:",e),console.error("FCMService: Error details:",e.message),e}}async saveTokenWithRetry(e,i,t=0){try{let o=null;if(this.isNative){const{FirebaseAuthentication:r}=await a(async()=>{const{FirebaseAuthentication:n}=await import("./index-CMcjIgnu.js");return{FirebaseAuthentication:n}},__vite__mapDeps([3,0,1])),{user:s}=await r.getCurrentUser();o=s?.uid,console.log("üîç FCMService: Capacitor Auth check - User ID:",o)}else o=l.currentUser?.uid,console.log("üîç FCMService: Web Auth check - User ID:",o);if(o)console.log("üéâ FCMService: Saving token to Firestore for user:",o),await this.saveTokenToFirestore(e,i),console.log("‚úÖ FCMService: Token saved successfully!");else if(t<10)console.log(`‚ö†Ô∏è FCMService: No authenticated user yet, retrying in 1s... (attempt ${t+1}/10)`),setTimeout(()=>this.saveTokenWithRetry(e,i,t+1),1e3);else throw console.error("‚ö†Ô∏è FCMService: No authenticated user after 10 attempts, token not saved"),new Error("Failed to save token: No authenticated user")}catch(o){if(console.error("‚ùå FCMService: Error in saveTokenWithRetry:",o),t<10)console.log(`‚ö†Ô∏è FCMService: Retrying after error... (attempt ${t+1}/10)`),setTimeout(()=>this.saveTokenWithRetry(e,i,t+1),1e3);else throw o}}async initializeWeb(){console.log("FCMService: Initializing web push notifications...");try{if(!("Notification"in window)){console.warn("FCMService: Notifications not supported in this browser");return}const{app:e}=await a(async()=>{const{app:t}=await import("./index-BYuuB5GE.js").then(o=>o.cx);return{app:t}},__vite__mapDeps([0,1]));this.messaging=b(e),console.log("FCMService: Messaging instance created");const i=await Notification.requestPermission();if(console.log("FCMService: Notification permission:",i),i==="granted")await this.getWebToken(),this.setupWebListeners();else throw console.warn("FCMService: Notification permission denied"),new Error("Notification permission denied")}catch(e){throw console.error("FCMService: Web initialization error:",e),e}}async getWebToken(){try{if(console.log("FCMService: Attempting to get FCM token..."),"serviceWorker"in navigator){const i=await navigator.serviceWorker.getRegistrations();if(console.log("FCMService: Service worker registrations:",i.length),i.length===0){console.warn("FCMService: No service worker registered, registering now...");try{const t=await navigator.serviceWorker.register("/firebase-messaging-sw.js");console.log("FCMService: Service worker registered successfully:",t.scope),await navigator.serviceWorker.ready}catch(t){throw console.error("FCMService: Service worker registration failed:",t),new Error("Service worker registration failed: "+t.message)}}}const e=await y(this.messaging,{vapidKey:this.vapidKey});return console.log("FCMService: Got web FCM token:",e),this.currentToken=e,l.currentUser&&await this.saveTokenToFirestore(e,"web"),e}catch(e){throw console.error("FCMService: Error getting web token:",e),e}}setupNativeListeners(){if(console.log("FCMService: Setting up native listeners..."),!this.FirebaseMessaging){console.error("FCMService: FirebaseMessaging plugin not loaded");return}this.FirebaseMessaging.addListener("tokenReceived",async e=>{console.log("üéâ FCMService: Token refreshed!"),console.log("üéâ FCMService: New token:",e.token),this.currentToken=e.token,console.log("üîÑ FCMService: Triggering token save after refresh..."),await this.saveTokenWithRetry(e.token,this.platform)}),this.FirebaseMessaging.addListener("notificationReceived",e=>{console.log("üì¨ FCMService: Notification received (foreground):",e.notification),this.handleForegroundNotification(e.notification)}),this.FirebaseMessaging.addListener("notificationActionPerformed",e=>{console.log("üëÜ FCMService: Notification tapped:",e.notification),this.handleNotificationTap(e)}),console.log("‚úÖ FCMService: Native listeners set up successfully")}setupWebListeners(){console.log("FCMService: Setting up web listeners..."),T(this.messaging,e=>{console.log("FCMService: Message received (foreground):",e),this.handleForegroundNotification(e)})}handleForegroundNotification(e){console.log("FCMService: Handling foreground notification:",e);let i,t,o;this.isNative?(i=e.title,t=e.body,o=e.data||{}):(i=e.notification?.title||e.data?.title_en,t=e.notification?.body||e.data?.body_en,o=e.data||{});const r=localStorage.getItem("user-language")||"en";r==="ar"&&o.title_ar&&(i=o.title_ar,t=o.body_ar),C.create({type:"info",message:i,caption:t,position:"top",timeout:5e3,actions:[{label:r==="ar"?"ÿπÿ±ÿ∂":"View",color:"white",handler:()=>{this.handleNotificationAction(o)}},{label:r==="ar"?"ÿ•ÿ∫ŸÑÿßŸÇ":"Dismiss",color:"white"}]}),this.notificationHandlers.forEach(s=>{try{s({title:i,body:t,data:o})}catch(n){console.error("FCMService: Handler error:",n)}})}handleNotificationTap(e){console.log("FCMService: Handling notification tap:",e);const i=e.notification?.data||{};this.handleNotificationAction(i)}handleNotificationAction(e){console.log("FCMService: Handling notification action:",e),a(async()=>{const{default:i}=await import("./index-BYuuB5GE.js").then(t=>t.cB);return{default:i}},__vite__mapDeps([0,1])).then(({default:i})=>{switch(e.type){case"booking":i.push("/bookings");break;case"order":i.push("/orders");break;case"news":e.newsId?i.push(`/news/${e.newsId}`):i.push("/news");break;case"announcement":i.push("/notifications");break;case"promo":case"promotion":i.push("/promotions");break;default:i.push("/notifications")}})}async saveTokenToFirestore(e,i){try{let t=null;if(this.isNative){const{FirebaseAuthentication:s}=await a(async()=>{const{FirebaseAuthentication:g}=await import("./index-CMcjIgnu.js");return{FirebaseAuthentication:g}},__vite__mapDeps([3,0,1])),{user:n}=await s.getCurrentUser();t=n?.uid,console.log("üîç FCMService: Getting user from Capacitor Auth:",t)}else t=l.currentUser?.uid,console.log("üîç FCMService: Getting user from Web SDK:",t);if(!t){console.warn("FCMService: No authenticated user, skipping token save");return}console.log("üíæ FCMService: Preparing to save token to Firestore:",{token:e,platform:i,userId:t});const o=this.hashToken(e),r=`users/${t}/tokens/${o}`;if(console.log("üìç FCMService: Token path:",r),this.isNative){console.log("üì± FCMService: Using Capacitor Firestore plugin to save token...");const{FirebaseFirestore:s}=await a(async()=>{const{FirebaseFirestore:g}=await import("./index-BO5nUoOC.js");return{FirebaseFirestore:g}},__vite__mapDeps([2,0,1])),n={token:e,platform:i,createdAt:new Date().toISOString(),lastSeenAt:new Date().toISOString(),deviceInfo:{userAgent:navigator.userAgent||"Unknown",isNative:this.isNative,platformType:this.platform}};console.log("üì§ FCMService: Calling Capacitor setDocument..."),await s.setDocument({reference:r,data:n,merge:!0}),console.log("‚úÖ FCMService: Token saved successfully via Capacitor Firestore!");try{await s.setDocument({reference:`users/${t}`,data:{fcmToken:e},merge:!0}),console.log("‚úÖ FCMService: User fcmToken updated (native)")}catch(g){console.warn("‚ö†Ô∏è FCMService: Failed to set flat fcmToken (native):",g)}}else{console.log("üåê FCMService: Using Web SDK to save token...");const s=h(u,"users",t,"tokens",o);await m(s,{token:e,platform:i,createdAt:d(),lastSeenAt:d(),deviceInfo:{userAgent:navigator.userAgent||"Unknown",isNative:this.isNative,platformType:this.platform}},{merge:!0}),console.log("‚úÖ FCMService: Token saved successfully via Web SDK!");try{const n=h(u,"users",t);await F(n,{fcmToken:e}),console.log("‚úÖ FCMService: User fcmToken updated (web)")}catch(n){console.warn("‚ö†Ô∏è FCMService: Failed to set flat fcmToken (web):",n)}}}catch(t){throw console.error("‚ùå FCMService: Error saving token:",t),console.error("‚ùå FCMService: Error details:",t.message,t.code),t}}async getCurrentUserId(){try{if(this.isNative){const{FirebaseAuthentication:e}=await a(async()=>{const{FirebaseAuthentication:t}=await import("./index-CMcjIgnu.js");return{FirebaseAuthentication:t}},__vite__mapDeps([3,0,1])),{user:i}=await e.getCurrentUser();return i?.uid}else return l.currentUser?.uid}catch(e){return console.error("FCMService: Error getting current user:",e),null}}async updateTokenLastSeen(){try{const e=await this.getCurrentUserId();if(!e||!this.currentToken)return;const i=this.hashToken(this.currentToken),t=h(u,"users",e,"tokens",i);await F(t,{lastSeenAt:d()}),console.log("FCMService: Token last seen updated")}catch(e){console.error("FCMService: Error updating token last seen:",e)}}async removeTokenFromFirestore(e){try{const i=await this.getCurrentUserId();if(!i){console.warn("FCMService: No authenticated user, skipping token removal");return}console.log("FCMService: Removing token from Firestore:",e);const t=this.hashToken(e),o=h(u,"users",i,"tokens",t);await M(o),console.log("FCMService: Token removed successfully")}catch(i){throw console.error("FCMService: Error removing token:",i),i}}async removeAllTokens(){try{const e=await this.getCurrentUserId();if(!e)return;console.log("FCMService: Removing all tokens for user:",e);const i=k(u,"users",e,"tokens"),t=p(i),r=(await S(t)).docs.map(s=>M(s.ref));await Promise.all(r),console.log("FCMService: All tokens removed")}catch(e){throw console.error("FCMService: Error removing all tokens:",e),e}}async unregister(){try{console.log("FCMService: Unregistering from push notifications..."),this.currentToken&&await this.removeTokenFromFirestore(this.currentToken),this.isNative&&this.FirebaseMessaging?(await this.FirebaseMessaging.removeAllListeners(),console.log("FCMService: Native listeners removed")):this.messaging&&(await N(this.messaging),console.log("FCMService: Web token deleted")),this.currentToken=null,console.log("FCMService: Unregistered successfully")}catch(e){throw console.error("FCMService: Error unregistering:",e),e}}onNotification(e){typeof e=="function"&&this.notificationHandlers.push(e)}offNotification(e){const i=this.notificationHandlers.indexOf(e);i>-1&&this.notificationHandlers.splice(i,1)}getCurrentToken(){return this.currentToken}async subscribeToTopic(e){console.log("FCMService: Topic subscription must be done server-side:",e)}async unsubscribeFromTopic(e){console.log("FCMService: Topic unsubscription must be done server-side:",e)}hashToken(e){let i=0;for(let t=0;t<e.length;t++){const o=e.charCodeAt(t);i=(i<<5)-i+o,i=i&i}return Math.abs(i).toString(36)}async isNotificationsEnabled(){return this.isNative&&this.FirebaseMessaging?(await this.FirebaseMessaging.checkPermissions()).receive==="granted":this.isNative?!1:Notification.permission==="granted"}async getPermissionStatus(){return this.isNative&&this.FirebaseMessaging?(await this.FirebaseMessaging.checkPermissions()).receive:this.isNative?"prompt":Notification.permission}}const c=new _,E=w(async({app:v,router:e})=>{console.log("FCM Boot: Starting..."),v.config.globalProperties.$fcm=c;let i=!1;const t=async r=>{if(i){console.log(`FCM Boot: Already initialized, skipping (source: ${r})`);return}console.log(`FCM Boot: Initializing FCM (source: ${r})...`);try{await c.initialize()?(i=!0,console.log(`FCM Boot: FCM initialized successfully (source: ${r})`),setInterval(()=>{c.updateTokenLastSeen()},1440*60*1e3)):console.warn(`FCM Boot: FCM initialization failed (source: ${r})`)}catch(s){console.error(`FCM Boot: Error initializing FCM (source: ${r}):`,s)}};l.currentUser&&(console.log("FCM Boot: User already authenticated (Web SDK), initializing FCM..."),setTimeout(()=>{t("auth.currentUser")},1e3)),l.onAuthStateChanged(async r=>{if(r){console.log("FCM Boot: Auth state changed - user authenticated");const s=c.platform==="ios"?2e3:500;setTimeout(()=>{t("onAuthStateChanged")},s)}else{console.log("FCM Boot: User logged out, unregistering FCM..."),i=!1;try{await c.unregister()}catch(s){console.error("FCM Boot: Error unregistering FCM:",s)}}}),c.platform==="ios"&&(console.log("FCM Boot: iOS detected - Setting up fallback user check..."),setTimeout(async()=>{try{const{FirebaseAuthentication:r}=await a(async()=>{const{FirebaseAuthentication:n}=await import("./index-CMcjIgnu.js");return{FirebaseAuthentication:n}},__vite__mapDeps([3,0,1])),{user:s}=await r.getCurrentUser();s&&s.uid&&!i?(console.log("FCM Boot: iOS fallback - Found authenticated user, initializing FCM..."),console.log("FCM Boot: User ID:",s.uid),setTimeout(()=>{t("ios-fallback-check")},1e3)):s?i&&console.log("FCM Boot: iOS fallback - FCM already initialized, skipping"):console.log("FCM Boot: iOS fallback - No user authenticated")}catch(r){console.error("FCM Boot: iOS fallback check failed:",r)}},5e3)),"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",r=>{r.data&&r.data.type==="NOTIFICATION_CLICK"&&(console.log("FCM Boot: Received navigation message from service worker:",r.data),e.push(r.data.url))}),console.log("FCM Boot: Complete")});export{E as default,c as fcmService};
